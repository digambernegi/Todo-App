{"version":3,"sources":["Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","InputData","setInputData","lists","localStorage","getItem","JSON","parse","getLocalData","Items","setItems","Edit","setEdit","Toggle","setToggle","addItems","map","curElem","id","name","myInput","Date","getTime","toString","alert","useEffect","setItem","stringify","className","src","alt","type","placeholder","value","onChange","event","target","onClick","index","edit_todo_items","find","editItems","updatedItems","filter","deleteItems","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQA6HeA,EA9GF,WACT,MAAgCC,mBAAS,IAAzC,mBAAMC,EAAN,KAAgBC,EAAhB,KACA,EAAuBF,mBAZN,WACrB,IAAMG,EAAMC,aAAaC,QAAQ,UACjC,OAAGF,EACQG,KAAKC,MAAMJ,GAGX,GAMyBK,IAAhC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBV,mBAAS,IAAjC,mBAAOW,EAAP,KAAaC,EAAb,KACA,EAAyBZ,oBAAS,GAAlC,mBAAOa,EAAP,KAAcC,EAAd,KAGMC,EAAW,WAEb,GAAId,EAIC,GAAGA,GAAaY,EAEjBH,EAASD,EAAMO,KAAI,SAACC,GAChB,OAAGA,EAAQC,KAAOP,EACP,2BAAIM,GAAX,IAAoBE,KAAKlB,IAEtBgB,MAGXf,EAAa,IACbU,EAAQ,IACRE,GAAU,OAEd,CACA,IAAMM,EAAQ,CACVF,IAAK,IAAIG,MAAOC,UAAUC,WAC1BJ,KAAKlB,GAETS,EAAS,GAAD,mBAAKD,GAAL,CAAYW,KACpBlB,EAAa,SArBrBsB,MAAM,mBAsDF,OANJC,qBAAU,WACNrB,aAAasB,QAAQ,SAASpB,KAAKqB,UAAUlB,MAC9B,CAACA,IAKZ,qBAAKmB,UAAU,WAAf,SACI,sBAAKA,UAAU,YAAf,UACJ,mCACA,qBAAKC,IAAI,mBAAmBC,IAAI,aAC5B,8CAGA,sBAAKF,UAAU,WAAf,UACC,uBAAOA,UAAU,gBAAgBG,KAAK,OAAOC,YAAY,yBACzDC,MAAOhC,EAAYiC,SAAU,SAACC,GAAD,OAAWjC,EAAaiC,EAAMC,OAAOH,UAEjEpB,EAAU,cAAC,IAAD,CAAWe,UAAU,YAAYS,QAAStB,IACpD,cAAE,IAAF,CAAea,UAAU,WAAWS,QAAStB,OAG3D,qBAAKa,UAAU,YAAf,SAGYnB,EAAMO,KAAI,SAAEC,GACR,OACI,sBAAKW,UAAU,YAAf,UACA,6BAAKX,EAAQE,OACb,sBAAKS,UAAU,WAAf,UACA,cAAC,IAAD,CAAWA,UAAU,WAAWS,QAAS,kBAvC5C,SAACC,GAClB,IAAMC,EAAkB9B,EAAM+B,MAAK,SAACvB,GAChC,OAAOA,EAAQC,KAAOoB,KAE1BpC,EAAaqC,EAAgBpB,MAC7BP,EAAQ0B,GACRxB,GAAU,GAiCwD2B,CAAUxB,EAAQC,OAEhE,cAAC,IAAD,CAAKU,UAAU,UAAUS,QAAS,kBAtDnC,SAACC,GAChB,IAAMI,EAAejC,EAAMkC,QAAO,SAAC1B,GAC/B,OAAOA,EAAQC,KAAOoB,KAE1B5B,EAASgC,GAkD+CE,CAAY3B,EAAQC,YAL5BD,EAAQC,SAcpD,qBAAKU,UAAU,OAAf,SACI,yBAAQA,UAAU,MAAM,oBAAkB,aAAaS,QAxDjD,WAElB3B,EAAS,KAsDG,cAA4E,yDCxGzEmC,MARf,WACE,OACE,qBAAKjB,UAAU,MAAf,SACA,cAAC,EAAD,OCKWkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ad390d70.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react';\r\nimport { BiPlusCircle,BiX,BiEditAlt } from \"react-icons/bi\";\r\n\r\nimport './Todo.css';\r\n\r\nconst getLocalData = () =>{\r\nconst lists=localStorage.getItem(\"mylist\");\r\nif(lists){\r\n    return JSON.parse(lists);\r\n}\r\nelse{\r\n    return [];\r\n}\r\n}\r\n\r\nconst Todo = () => {\r\n    const[InputData,setInputData] = useState(\"\");\r\n    const [Items,setItems]=useState(getLocalData());\r\n    const [Edit, setEdit] = useState(\"\");\r\n    const [Toggle,setToggle]=useState(false);\r\n\r\n\r\n    const addItems = ()=>\r\n    {\r\n        if(!InputData)\r\n        {\r\nalert(\"Todo is empty!\");\r\n        }\r\n        else if(InputData && Toggle)\r\n        {\r\n            setItems(Items.map((curElem) => {\r\n                if(curElem.id === Edit){\r\n                    return {...curElem, name:InputData}\r\n                }\r\n                return curElem;\r\n            }));\r\n\r\n            setInputData(\"\");\r\n            setEdit(\"\");\r\n            setToggle(false);\r\n        }\r\n    else{\r\n        const myInput={\r\n            id : new Date().getTime().toString(),\r\n            name:InputData,\r\n        };\r\n        setItems([...Items, myInput])\r\n        setInputData(\"\");\r\n    }\r\n};\r\n\r\n\r\nconst deleteItems =(index) =>{\r\n    const updatedItems = Items.filter((curElem) => {\r\n        return curElem.id !== index;\r\n    });\r\n    setItems(updatedItems);\r\n};\r\n\r\n\r\nconst removeAll = ()=>\r\n{\r\nsetItems([]);\r\n};\r\n\r\nconst editItems= (index) =>{\r\nconst edit_todo_items = Items.find((curElem)=>{\r\n    return curElem.id === index;\r\n})\r\nsetInputData(edit_todo_items.name);\r\nsetEdit(index);\r\nsetToggle(true);\r\n}\r\n\r\nuseEffect(() => {\r\n    localStorage.setItem(\"mylist\",JSON.stringify(Items))\r\n                } ,[Items]);\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"main_div\">\r\n            <div className=\"child_div\">\r\n        <figure>\r\n        <img src=\"../checklist.png\" alt=\"todolist\" />\r\n            <h3>Todo List</h3>\r\n        </figure>\r\n\r\n            <div className=\"addItems\">\r\n             <input className=\"form_controls\" type=\"text\" placeholder=\"Add Items 📝\"\r\n             value={InputData } onChange={(event) => setInputData(event.target.value)}/>\r\n\r\n             {Toggle ? (<BiEditAlt className=\"edit-btnn\" onClick={addItems}/>) :\r\n             (< BiPlusCircle className=\"add-btnn\" onClick={addItems}/>)}\r\n            </div>\r\n\r\n<div className=\"showItems\">\r\n\r\n        {\r\n            Items.map(( curElem) => {\r\n                return (\r\n                    <div className=\"eachItems\" key={curElem.id}>\r\n                    <h3>{curElem.name}</h3>\r\n                    <div className=\"todo-btn\">\r\n                    <BiEditAlt className=\"edit-btn\" onClick={()=> editItems(curElem.id)}/>\r\n\r\n                    <BiX className=\"del-btn\" onClick={() => deleteItems(curElem.id)}/>\r\n\r\n                   </div>\r\n                </div>\r\n                );\r\n            })}\r\n\r\n            </div>\r\n\r\n        <div className=\"show\">\r\n            <button className=\"btn\" data-sm-link-text=\"Remove All\" onClick={removeAll}> <span>Clear List</span></button>\r\n        </div>\r\n\r\n        </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Todo;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Todo from \"./Todo.js\"\n\nfunction App() {\n  return (\n    <div className=\"app\">\n    <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}